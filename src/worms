#!/usr/bin/env python

## Finding Song Home embedded system for Kaffe Matthews
## Copyright (C) 2015 Tom Keene
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.

import liblo, sys, os, time, math, threading, subprocess, random, json
import Adafruit_BBIO.ADC as ADC

# Start the app with:
#   ./worms (runs everything)
#   ./worms test (loads test sounds from a dir)
#   ./worms analog (just run analog)
#   ./worms wifi (just runs wifi)

# The application class
class Wormery:

    # Initialise the object
    def __init__(self):
        # Load the config file
        self.loadedmemory = 0
        self.maxmemory = 55*1024*1024 # the first number is mb's. Needs to be low because of OpenenFrameworks terrible audio module which used 6X memory for each sound!
        self.mode = 'mode'
        self.nfiles = 1
        # Grab the unique serial number of this device
        try:
            self.serial = subprocess.check_output("./grabserial.sh", shell=True).decode("utf-8")
            self.serial.replace('\r','')
        except:
            self.log('Unable to find SERIAL number.')
            sys.exit()
        # Load the config
        try:
            json_data=open('/home/sonic/sdcard/config.json')
            data = json.load(json_data)
            self.mode = data["mode"]
            self.directory = data['audio_path']
            json_data.close()
        except:
            self.log('Couldn\'t find config at: /home/sonic/sdcard/config.json')
            sys.exit()
        # Setup the OSC object so we can send messages
        try:
            self.target = liblo.Address(12345)
        except liblo.AddressError as err:
            self.log(err)
            sys.exit()
        # Load some test sounds
        if 'test' in sys.argv or self.mode=='random':
            self.load_test_sounds()
        # And setup the analog read
        ADC.setup()
        # Release the worms! Start some threads
        if 'wifi' in sys.argv or sys.argv[0]== '' :
            threading.Thread(target=self.worm_wifi).start()
            threading.Thread(target=self.worm_wifi_osc).start()
        if 'analog' in sys.argv or sys.argv[0] == '' :
            threading.Thread(target=self.worm_analog).start()
    
    # Just load some test sounds for us to play with
    def load_test_sounds(self):
        # Grab a list of filenames
        self.log("========worms in test mode=======")
        import glob
        self.whichfile = 5
        liblo.send(self.target, "/setaudiodir", self.directory)
        self.files = glob.glob("{}*.wav".format(self.directory)) 
        try:
            files.remove(directory+"startup.wav")
        except:
            pass
        # Now load an play some files
        canchange = 0
        i = 0
        self.filesizes = [0]*(self.nfiles+1)
        while i <= self.nfiles:
            canchange = 1 #not canchange
            self.playrandomfile("/loopplay", i, canchange)
            i = i+1

    def playrandomfile(self, command, channel, canchange):
        if canchange: change=1
        else: change=0
        rand = random.randint(0, len(self.files)-1)
        myfile = self.files[rand].replace(self.directory, '')
        myfile = self.files[self.whichfile].replace(self.directory, '')
        self.whichfile = self.whichfile+1
        # Only load if we have enough memory
        if self.availmemory(myfile, channel):
            liblo.send(self.target, "/load", channel, myfile)
            liblo.send(self.target, command, channel)
            liblo.send(self.target, "/masschange", channel, change)
    
    # swap sound
    def swapsound(self):
        channel = random.randint(0, self.nfiles)
        self.loadedmemory=self.loadedmemory-self.filesizes[channel]
        liblo.send(self.target, "/unload", channel)
        time.sleep(0.5)
        canchange = random.randint(0, 1)
        self.playrandomfile("/loopplay", channel, canchange)

    # Available memory
    def availmemory(self, myfile, channel):
        path = self.directory+myfile
        filesize = os.path.getsize(path)
        free = self.maxmemory-self.loadedmemory
        op = 'Filesize:{}mb Loaded:{}mb Free:{} Path:{}'.format(self.toMB(filesize), self.toMB(self.loadedmemory), self.toMB(free), path) 
        if filesize > free:
            return False
        else:
            self.log('{} {}'.format(op, self.filesizes))
            self.filesizes[channel] = filesize
            self.loadedmemory=self.loadedmemory+filesize
            return True

    # convert to megabytes
    def toMB(self, var):
        return round(var/1024/1024,2)

    # Thread to monitor wifi signals
    def worm_wifi(self):
        # Setup base vars
        self.wifivars = {
            'ssidlevel':0,
            'naccesspoints':0,
            'averagelevel':0,
            'startosc':False,
        }
        myESSID = 'sonic-'+self.serial 
        # Lets check which interface is up
        try:
            interface = subprocess.check_output("ip a | grep wlan | awk '{print $2}' | sed s/://g | tr -d '\n'", shell=True).decode("utf-8")
        except:
            pass
        scanwifi = 'sudo iwlist {} scan'.format(interface)
        self.log(scanwifi)
        # Keep checking on the wifi signals in the area
        while True:
            # Grab all the signals
            try:
                resp = subprocess.check_output(scanwifi, shell=True).decode("utf-8").split("\n")
                keyword = 'Signal' 
                i=0
                levels = []
                self.wifivars['ssidlevel'] = 0
                for line in resp:
                    # Save all the signal levels
                    if keyword in line:
                        level=self.grab_signal_level(line) 
                        levels.append(int(level))
                        #self.log(line)
                    # Save the level of a all wifi essid's beginng in 'sonic-'
                    if 'sonic' in line:
                        if myESSID not in line:
                            #self.log('FoundOtherSonicWifi:{}'.format(line))
                            newlevel = self.grab_signal_level(resp[i-2])
                            if newlevel > self.wifivars['ssidlevel']:
                                self.wifivars['ssidlevel'] = newlevel
                        else:
                            #self.log('FoundMySonicWifi:{}'.format(line))
                            pass
                    i=i+1
                self.wifivars['averagelevel'] = sum(levels) / len(levels)
                self.wifivars['naccesspoints'] = len(levels)
                self.wifivars['startosc'] = True
            except Exception as e:
                self.log('no wifi found with:'.format(scanwifi))
            time.sleep(3)
    
    # What OSC messages should we send for the worm wifi?
    def worm_wifi_osc(self):
        oscTimer = AsyncTimer(4) # Trigger every n seconds
        swapSoundTimer = AsyncTimer(30) # Trigger every n seconds
        printTimer = AsyncTimer(2) # Trigger every n seconds
        posRange = Ranger([0,5], [0.0,1.0])
        lenRange = Ranger([0,5], [0.0,10.0])
        levelRange = Ranger([0,100], [0.1,100.0])
        levelSmoothed = Smoother(4)
        while True:
            if self.wifivars['startosc']: 
                # Setup some vars
                level = levelSmoothed.grab(self.wifivars['ssidlevel'])
                accesspoints = self.wifivars['naccesspoints']
                # Calculate variables for the superlooper
                position = posRange.convert(accesspoints)
                length = levelRange.convert(level)
                length = 100.0-length
                if length < 0.1: length=0.1
                # prep debug output
                output = ' level:{}'.format(level) 
                output += ' accesspoints:{}'.format(accesspoints) 
                output += ' position:{}'.format(position)
                output += ' length:{}'.format(length)
                # Send some OSC at a certain interval
                if oscTimer.istime():
                    # Set the loop when nearby
                    #liblo.send(self.target, "/masssuperlooper", "on", position, length)
                    #self.log("/masssuperlooper on pos:{} len:{} | {}".format(position, length, output))
                    #self.log("/masssuperlooper on pos:{} len:{} | {}".format(position, length, output))
                    # Set the pitch when nearby
                    inc = 0.3
                    speed = 0.2
                    mmax = 10.5 # maximum pitch
                    mmin = 0.4  # minimim pitch
                    if level >= 70: 
                        liblo.send(self.target, "/masssuperpitch", 'up', inc, speed, mmax, mmin)
                    if level <= 69: 
                        liblo.send(self.target, "/masssuperpitch", 'down', inc, speed, mmax, mmin)
                    if level <= 20: 
                        liblo.send(self.target, "/masssuperpitch", 'off', inc, speed, mmax, mmin)
                        liblo.send(self.target, "/massspitch", 'off', 1.0)
                # If we are in random mode then regularly swap the sound
                if self.mode == 'randomm':
                    if swapSoundTimer.istime():
                        self.swapsound()
            time.sleep(1)
            
    def calc_pitch(self, level):
        pitch = level*0.01
        if pitch < 0.3: 
            pitch = 0.3
        return pitch
    
    def calc_length(self, level):
        level = 100-level
        length = level*0.01
        return length
 
    # Thread to monitor all analog input
    def worm_analog(self):
        # Setup an asysnc timer
        Atimer = AsyncTimer(5) # Trigger every n seconds
        Asmoother = Smoother(100)
        #Aranger = Ranger([0.0,1.0], [0.2, 5.0]) 
        oldsmoothval = -1;
        move = 'off';
        # Start the loop and check for values
        while True:        
            # pitch = (-1*math.sin(step)*(top-bottom))+(top-bottom) #Sine wave step += 0.2 # Used for testing
            # Read the analog input and count how many times
            b = round(ADC.read("AIN1"),2) # returns a value between 0 and 1.0
            smoothvalue = Asmoother.grab(b)
            #bconverted = round(Aranger.convert(bvalue), 2)
            if Atimer.istime():
                if smoothvalue > oldsmoothval: move='up'
                if smoothvalue < oldsmoothval: move='down'
                if smoothvalue == oldsmoothval: move='off'
                inc = 0.3
                speed = 0.2
                mmax = 10.5 # maximum pitch
                mmin = 0.5  # minimim pitch
                liblo.send(self.target, "/masssuperpitch", move, inc, speed, mmax, mmin)
                oldsmoothval = smoothvalue
                self.log("smooth:{} oldsmooth:{} OSC:/superpitch move:{} inc:{} speed:{} mmax:{} mmin:{}".format(smoothvalue, oldsmoothval, move, inc, speed, mmax, mmin))

    # UTILITIES ===========
    def grab_signal_level(self, line):
        try:
            #level=line.strip().split("Quality=")[1].replace(' dBm', '')
            nums = line.split('Quality=')[1].split('  Signal level')[0].split('/')
            quality =  int(round(float(nums[0]) / float(nums[1]) * 100))
        except:
            quality = 0
        return int(quality)
    
    # logger
    def log(self, txt):
        print('[worms] {}'.format(txt))

# Async timer class
class AsyncTimer:
    # Initialise the object
    def __init__(self, interval):
        # Setup vars
        self._start = time.time()
        self._elapsed = 0
        self._interval = interval
    def istime(self):
        self._elapsed = time.time() - self._start
        if self._elapsed >= self._interval:
            self._start = time.time()
            return True
        else:
            return False

# Smooth values class
class Smoother:
    # Initialise the object
    def __init__(self, smoothlen):
        # Setup vars
        self.smootharray = [0]*smoothlen
        self.i = 0
    def grab(self, value):
        self.smootharray[self.i] = value
        self.i = self.i+1
        if self.i > len(self.smootharray)-1: self.i=0
        return sum(self.smootharray) / len(self.smootharray )


# Range class
class Ranger:
    # Initialise the object
    def __init__(self, rangeA, rangeB):
        self._maxA = rangeA[1]
        self._minA = rangeA[0]
        self._maxB = rangeB[1]
        self._minB = rangeB[0]
    def convert(self, valueA):
        # Where the old range goes higher or lower than max or min
        # Be sure reset the max/min
        if (valueA < self._minA): self._minA = valueA
        if (valueA > self._maxA): self._maxA = valueA 
        rangeA = (self._maxA-self._minA)
        rangeB = (self._maxB-self._minB)  
        valueB = (((valueA-self._minA)*rangeB)/rangeA)+self._minB
        return valueB 


# Start the app
Wormery()
#from random import randint
#atimer = AsyncTimer(1)
#staticRange = RangeConvertor([0,100], [0.0,1.0])
#smoothA = Smoother(4)
#while True:
#    if atimer.istime():
#        value = randint(0,100) 
#        newvalue = staticRange.convert(value)
#        smoothvalue = smoothA.grab(newvalue)
#        self.log('OldValue:{} NewValue:{} Smoothed:{}'.format(value, newvalue, smoothvalue))
